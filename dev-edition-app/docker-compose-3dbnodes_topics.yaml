#
# Copyright (C) 2025 Volt Active Data Inc.
#
# Use of this source code is governed by an MIT
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.
#

services:
  voltdb01:
    image: ${VOLTDB_IMAGE}
    platform: linux/amd64
    container_name: voltdb01
    hostname: voltdb01
    command: /opt/voltdb/tools/kubernetes/test-entrypoint.sh
    healthcheck:
      test: [ "CMD-SHELL", "sqlcmd --query='exec @Ping;'" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - 21212:21212
      - 9092:9092
    expose:
      - "21212"
      - "9092"
    environment:
      VOLTDB_START_CONFIG: "--ignore=thp -c 3 -H voltdb01,voltdb02,voltdb03 --publicinterface=localhost"
      VOLTDB_LICENSE: "/etc/voltdb/license.xml"
      VOLTDB_CONFIG: /etc/voltdb/deployment.xml
      VOLTDB_SCHEMA: /etc/voltdb/voltdb-schemas
      VOLTDB_CLASSES: /etc/voltdb/voltdb-classes
      VOLTDB_DIR: /voltdb01
      VOLTDB_INIT_FORCE: true
    volumes:
      - ${LICENSE_FILE_PATH}:/etc/voltdb/license.xml
      - ./resources/deploymentk1_topics.xml:/etc/voltdb/deployment.xml
      - ./resources/voltdb-schemas:/etc/voltdb/voltdb-schemas
      - ./resources/voltdb-apps:/etc/voltdb/voltdb-classes
      - db:/voltdb

  voltdb02:
    image: ${VOLTDB_IMAGE}
    platform: linux/amd64
    container_name: voltdb02
    hostname: voltdb02
    command: /opt/voltdb/tools/kubernetes/test-entrypoint.sh
    healthcheck:
      test: [ "CMD-SHELL", "sqlcmd --query='exec @Ping;'" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - 31212:31212
      - 39092:39092
    expose:
      - "31212"
      - "39092"
    environment:
      VOLTDB_START_CONFIG: "--ignore=thp -c 3 -H voltdb01,voltdb02,voltdb03 --publicinterface=localhost  --client=:31212 --admin=:31211 --topicsport=39092"
      VOLTDB_LICENSE: "/etc/voltdb/license.xml"
      VOLTDB_CONFIG: /etc/voltdb/deployment.xml
      VOLTDB_SCHEMA: /etc/voltdb/voltdb-schemas
      VOLTDB_CLASSES: /etc/voltdb/voltdb-classes
      VOLTDB_DIR: /voltdb02
      VOLTDB_INIT_FORCE: true
    volumes:
      - ${LICENSE_FILE_PATH}:/etc/voltdb/license.xml
      - ./resources/deploymentk1_topics.xml:/etc/voltdb/deployment.xml
      - ./resources/voltdb-schemas:/etc/voltdb/voltdb-schemas
      - ./resources/voltdb-apps:/etc/voltdb/voltdb-classes
      - db:/voltdb

  voltdb03:
    image: ${VOLTDB_IMAGE}
    platform: linux/amd64
    container_name: voltdb03
    hostname: voltdb03
    command: /opt/voltdb/tools/kubernetes/test-entrypoint.sh
    healthcheck:
      test: [ "CMD-SHELL", "sqlcmd --query='exec @Ping;'" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - 41212:41212
      - 49092:49092
    expose:
      - "41212"
      - "49092"
    environment:
      VOLTDB_START_CONFIG: "--ignore=thp -c 3 -H voltdb01,voltdb02,voltdb03 --publicinterface=localhost  --client=:41212 --admin=:41211 --topicsport=49092"
      VOLTDB_LICENSE: "/etc/voltdb/license.xml"
      VOLTDB_CONFIG: /etc/voltdb/deployment.xml
      VOLTDB_SCHEMA: /etc/voltdb/voltdb-schemas
      VOLTDB_CLASSES: /etc/voltdb/voltdb-classes
      VOLTDB_DIR: /voltdb03
      VOLTDB_INIT_FORCE: true
    volumes:
      - ${LICENSE_FILE_PATH}:/etc/voltdb/license.xml
      - ./resources/deploymentk1_topics.xml:/etc/voltdb/deployment.xml
      - ./resources/voltdb-schemas:/etc/voltdb/voltdb-schemas
      - ./resources/voltdb-apps:/etc/voltdb/voltdb-classes
      - db:/voltdb

  voltdb-init:
    image: ${VOLTDB_IMAGE}
    platform: linux/amd64
    container_name: voltdb-init
    hostname: voltdb-init
    command: >
      sh -c "csvloader --skip=1 --reportdir=/etc/voltdb/data --servers=voltdb01 -f /etc/voltdb/data/accounts.csv ACCOUNTS && 
             csvloader --skip=1 --reportdir=/etc/voltdb/data --servers=voltdb01 -f /etc/voltdb/data/known_vehicles.csv KNOWN_VEHICLES && 
             csvloader --skip=1 --reportdir=/etc/voltdb/data --servers=voltdb01 -f /etc/voltdb/data/toll_locations.csv TOLL_LOCATIONS && 
             csvloader --skip=1 --reportdir=/etc/voltdb/data --servers=voltdb01 -f /etc/voltdb/data/vehicle_types.csv VEHICLE_TYPES"
    depends_on:
      voltdb01:
        condition: service_healthy
    volumes:
      - ./resources/voltdb-apps:/etc/voltdb/data/

  vmc:
    image: ${VMC_IMAGE}
    platform: linux/amd64
    container_name: vmc
    command: java -jar /opt/voltdb/volt-vmc-svc.jar --servers=voltdb01 --port=21212
    depends_on:
      voltdb01:
        condition: service_healthy
    ports:
      - 8080:8080
    environment:
      VOLTDB_CONTAINER: docker

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./resources/prometheus-3dbnode.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.level=error'

  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_DISABLE_SIGNOUT_MENU=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_DEFAULT_THEME=light
      - GF_LOG_LEVEL=critical
      - GF_LOG_MODE=file
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/welcome-dashboard.json
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource,marcusolsson-treemap-panel,zestairlove-compacthostmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./resources/dashboards:/etc/grafana/dashboards
      - ./resources/volt-stream.svg:/usr/share/grafana/public/img/grafana_icon.svg
      - ./resources/volt-stream.png:/usr/share/grafana/public/img/grafana_icon.png
      - ./resources/dashboards/voltdb:/etc/grafana/provisioning/voltdb-dashboards
      - ./resources/dashboards/voltsp:/etc/grafana/provisioning/voltsp-dashboards
      - ./resources/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./resources/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml

  voltsp:
    image: ${VOLTSP_IMAGE}
    platform: linux/amd64
    depends_on:
      voltdb01:
        condition: service_healthy
      voltdb-init:
        condition: service_completed_successfully
    container_name: voltsp
    healthcheck:
      test: curl --fail http://localhost:11781/metrics || exit 1
      interval: 60s
      retries: 5
      start_period: 30s
      timeout: 10s
    mem_limit: 3g
    environment:
      - JAVA_OPTS=-XX:InitialRAMPercentage=80.0 -XX:MinRAMPercentage=80.0 -XX:MaxRAMPercentage=80.0 --add-opens java.base/sun.nio.ch=ALL-UNNAMED -Dvoltsp.parallelism=10
    volumes:
      - ./resources/voltsp-apps:/volt-apps
      - ./resources/voltsp-config-3dbnode.yaml:/etc/voltsp/configuration.yaml
      - ./resources/log4j2.xml:/etc/app/log4j2.xml
      - ${LICENSE_FILE_PATH}:/etc/voltsp/license.xml

volumes:
  db:
  grafana_data:
